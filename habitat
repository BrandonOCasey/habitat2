#!/usr/bin/env bash

habitat_help() {
  echo
  echo "  Usage: . habitat [options]"
  echo
  echo "  -d, --debug        print debug statements"
  echo "  -f, --force        force habitat to rebuild now rather than once a day"
  echo "  -t, --time <mins>  time between rebuilds in minutes, defaults is 1440 (1 day)"
  echo "  -n, --no-run       don't run habitat"
  echo "  -s, --sync         do a synchronous build"
  echo "  -h, --help         show this help"
  echo
}

habitat_main() {
  local build_dir="$HABITAT_DIR/.build"
  local syml="$(find "$build_dir" -type l)"
  local debug=1
  local time=1440
  local run=0
  local sync=1
  local build=0

  while [ $# -gt 0 ]; do
    local argv="$1"; shift

    case "$argv" in
      -d|--debug) debug=0 ;;
      -h|--help) habitat_help && habitat_clean && return ;;
      -t|--time) time="$1"; shift ;;
      -f|--force) time=0 ;;
      -n|--no-run) run=1 ;;
      -n|--no-build) build=1 ;;
      -s|--sync) sync=0 ;;
      *)
    esac
  done

  if [ -z "echo "$time" | grep "[0-9]+")" ]; then
    echo "Must pass a number with --time" 2>&1
    habitat_clean
    return
  fi

  habitat_build() {
    [ "$build" = "1" ] && return
    local cmd="$HABITAT_DIR/bin/build.sh $build_dir"

    if [ ! -L "$syml" ] || [ "$sync" = "0" ]; then
      echo "Doing synchronously build of your habitat"
      echo "This happens on the first build or with --sync"
      $cmd
      return
    fi
    echo "Building your habitat in the background..."
    ($cmd & 1>/dev/null 2>/dev/null)
  }

  habitat_run() {
    if [ "$run" = 1 ]; then
      return
    fi

    local old_ifs="$IFS"
    IFS="
  "
    for file in $(find "$HABITAT_DIR/lib" -name '*.sh' && find -L "$syml" -name '*.sh'); do
      if [ "$debug" = 0 ]; then
        time . "$file"
        echo "$file"
      else
        . "$file"
      fi
    done
    IFS="$old_ifs"
  }

  if [ -z "$(find "$syml" -type l -mmin "-${time}" 2>/dev/null)" ]; then
    habitat_build "$synchronous"
  fi

  habitat_run
  habitat_clean
}

habitat_clean() {
  unset -f habitat_build
  unset -f habitat_run
  unset -f habitat_help
  unset -f habitat_main
  unset -f habitat_clean
}

if [ -z "$HABITAT_DIR" ] || [ ! -d "$HABITAT_DIR" ]; then
  echo "HABITAT_DIR must be set and exist before sourcing habitat" 2>&1
else
  habitat_main "$@"
  alias habitat=". $HABITAT_DIR/habitat"

  if [ -z "$(echo "$PROMPT_COMMAND" | grep "$HABITAT_DIR")" ]; then
    PROMPT_COMMAND=". '$HABITAT_DIR/habitat' --no-build; $PROMPT_COMMAND"
  fi
fi


