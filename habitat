#!/usr/bin/env bash

newline="
"

habitat_help() {
  echo
  echo "  Usage: . habitat [options]"
  echo
  echo "  -d, --debug        print debug statements"
  echo "  -f, --force        force habitat to rebuild now rather than once a day"
  echo "  -t, --time <mins>  time between rebuilds in minutes, defaults is 600 (10 hours)"
  echo "  -n, --no-run       don't run habitat"
  echo "  -h, --help         show this help"
  echo
}

habitat_main() {
  local build_dir="$HABITAT_DIR/.build"
  [ ! -d "$build_dir" ] && mkdir -p "$build_dir"
  local debug=1
  local rebuild_time=600
  local run=0
  local build=0

  while [ $# -gt 0 ]; do
    local argv="$1"; shift

    case "$argv" in
      -d|--debug) debug=0 ;;
      -h|--help) habitat_help && habitat_clean && return ;;
      -t|--time) rebuild_time="$1"; shift ;;
      -f|--force) rebuild_time=0  && rm -f "$build_dir/lock";;
      -n|--no-run) run=1 ;;
      -n|--no-build) build=1 ;;
      *)
    esac
  done

  if [ -z "echo "$rebuild_time" | grep "[0-9]+")" ]; then
    echo "Must pass a number with --time" 2>&1
    habitat_clean
    return
  fi

  habitat_build() {
    [ "$build" = "1" ] && return

    echo "Building your habitat!"
    export HABITAT_DEBUG="$debug"
    "$HABITAT_DIR/bin/build.sh" "$build_dir" "$$"
    unset HABITAT_DEBUG
  }

  habitat_run() {
    [ "$run" = 1 ] && return

    local old_ifs="$IFS"
    IFS="$newline"
    for file in $(find "$HABITAT_DIR/lib" -name '*.sh' && find -L "$build_dir/syml" -name '*.sh'); do
      [ "$debug" = 0 ] && time . "$file" && echo "Ran $(basename "$file")" && continue
      . "$file"
    done
    if [ -L "$build_dir/syml" ]; then
      export HABITAT_BUILD="$(readlink "$build_dir/syml")"
    fi
    IFS="$old_ifs"
  }

  # if its time to rebuild
  [ -z "$(find "$build_dir/syml" -type l -mmin "-${rebuild_time}" 2>/dev/null)" ] && habitat_build

  habitat_run
  habitat_clean
}

habitat_clean() {
  unset -f habitat_build
  unset -f habitat_run
  unset -f habitat_help
  unset -f habitat_main
  unset -f habitat_clean
  unset newline
}
$(return >/dev/null 2>&1)

if [ "$?" != "0" ]; then
  echo "Script must be sourced, not run"
  exit 1
fi

if [ -z "$HABITAT_DIR" ] || [ ! -d "$HABITAT_DIR" ]; then
  echo "HABITAT_DIR must be set and exist before sourcing habitat" 2>&1
  return 1
fi

# SIGUSR1 is used to update every terminal when
# any terminal does a rebuild
trap ". '$HABITAT_DIR/habitat' --no-build" SIGUSR1
alias habitat=". $HABITAT_DIR/habitat"
export HABITAT_DIR="$HABITAT_DIR"

habitat_main "$@"


